import logging
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
import os
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —á–µ—Ä–µ–∑ BotFather
API_TOKEN = '8075874421:AAHwWSia-Hs3bHeTFrTVPJnOVVofYBYPD1o'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite (–∏–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π)
db = sqlite3.connect('./DB/calculations.db')
cursor = db.cursor()

dbBook = sqlite3.connect('./DB/tour_bookings.db')
cursorBook = dbBook.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
cursor.execute('''CREATE TABLE IF NOT EXISTS calculations (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    propertyType TEXT,
    repairType TEXT,
    rooms INTEGER,
    bathrooms INTEGER,
    area REAL,
    contactMethod TEXT,
    chatId INTEGER,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
);''')

cursorBook.execute('''CREATE TABLE IF NOT EXISTS bookings (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    phone TEXT,
    date TEXT,
    time TEXT
);''')

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
userData = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    chat_id = message.chat.id
    userData[chat_id] = {}

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üè†–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ–º–æ–Ω—Ç–∞", callback_data='calculate_cost'),
        InlineKeyboardButton('üì∏ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –Ω–∞—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤', url='https://proremont18.ru/nashi-rabotyi/'),
        InlineKeyboardButton("üìù–û—Ç–∑—ã–≤—ã", url='https://vk.com/app6326142_-214261496'),
        InlineKeyboardButton("üìù–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é", callback_data='book_tour'),
        InlineKeyboardButton("‚ùì–¢–æ–ø —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤(—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)", callback_data='faq'),
        InlineKeyboardButton("üéÅ –ü–û–î–ê–†–û–ö", callback_data='gift'),
        InlineKeyboardButton('–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üìû', callback_data='contact_info'),
        InlineKeyboardButton('üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', callback_data='contact_manager')
    )
    await message.answer(
        'üõ†–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü—Ä–æ–†–µ–º–æ–Ω—Ç! –ù–∞—à –±–æ—Ç –º–æ–∂–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞, –∑–∞–ø–∏—Å–∞—Ç—å –≤–∞—Å –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é –ø–æ –Ω–∞—à–∏–º –¥–µ–π—Å—Ç–≤—É—é—â–∏–º –æ–±—ä–µ–∫—Ç–∞–º, –∞ —Ç–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –Ω–∞—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –æ—Ç–∑—ã–≤—ã –∑–∞–∫–∞–∑—á–∏–∫–æ–≤!üõ†',
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler(lambda c: c.data)
async def process_callback(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    data = callback_query.data

    if data == 'book_tour':
        await bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
        userData[chat_id] = {}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif data == 'contact_info':
        contact_info = """
        –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
        üìç –ê–¥—Ä–µ—Å: –≥. –ò–∂–µ–≤—Å–∫, —É–ª. –ú–µ—Ç–∞–ª–ª—É—Ä–≥–æ–≤, 2
        üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (919) 916-20- 49
        ‚úâÔ∏è E-mail: proremont.18@yandex.ru
        üïí –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –ü–Ω. ‚Äì –ü—Ç. —Å 8:00 –¥–æ 17:00
        """
        await bot.send_message(chat_id, contact_info)
    elif data == 'contact_manager':
        contact_info = """
        üë®‚Äçüíº *–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:*
        üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (919) 916-20-49
        üìß E-mail: proremont.18@yandex.ru
        """
        await bot.send_message(chat_id, contact_info)
    elif data == 'gift':
        await send_gift_files(chat_id)
    elif data == 'calculate_cost':
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:', reply_markup=types.ReplyKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton('–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞', callback_data='new_building'), InlineKeyboardButton('–í—Ç–æ—Ä–∏—á–∫–∞', callback_data='secondary')],
                [InlineKeyboardButton('–ß–∞—Å—Ç–Ω—ã–π –¥–æ–º', callback_data='house'), InlineKeyboardButton('–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ', callback_data='commercial')]
            ]
        ))

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤
async def send_gift_files(chat_id):
    loading_msg = await bot.send_message(chat_id, '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤...')
    pdf_files = ['pdf/Aq.pdf', 'pdf/compressed.pdf']

    for file in pdf_files:
        try:
            await bot.send_document(chat_id, open(file, 'rb'))
            logger.info(f'–§–∞–π–ª {file} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ.')
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {file}: {e}')
            await bot.send_message(chat_id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.')

    await bot.delete_message(chat_id, loading_msg.message_id)
    await bot.send_message(chat_id, '–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=['text'])
async def handle_message(message: types.Message):
    chat_id = message.chat.id
    text = message.text

    if chat_id in userData:
        if 'name' not in userData[chat_id]:
            userData[chat_id]['name'] = text
            await bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
        elif 'phone' not in userData[chat_id]:
            userData[chat_id]['phone'] = text
            await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-11-13):')
        elif 'date' not in userData[chat_id]:
            userData[chat_id]['date'] = text
            await bot.send_message(chat_id, '–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è —ç–∫—Å–∫—É—Ä—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15:00):')
        elif 'time' not in userData[chat_id]:
            userData[chat_id]['time'] = text
            await bot.send_message(chat_id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–∏—Å—å! –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.')

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            name = userData[chat_id]['name']
            phone = userData[chat_id]['phone']
            date = userData[chat_id]['date']
            time = userData[chat_id]['time']

            cursorBook.execute('INSERT INTO bookings (name, phone, date, time) VALUES (?, ?, ?, ?)',
                               (name, phone, date, time))
            dbBook.commit()

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin_chat_id = '1426960007'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await bot.send_message(admin_chat_id, f'–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é: \n–ò–º—è: {name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–î–∞—Ç–∞: {date}\n–í—Ä–µ–º—è: {time}')

            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            del userData[chat_id]
        else:
            await bot.send_message(chat_id, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é.')

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

@dp.callback_query_handler(lambda c: c.data == 'calculate_cost')
async def handle_calculate_cost(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton('–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞', callback_data='new_building'),
        InlineKeyboardButton('–í—Ç–æ—Ä–∏—á–∫–∞', callback_data='secondary'),
        InlineKeyboardButton('–ß–∞—Å—Ç–Ω—ã–π –¥–æ–º', callback_data='house'),
        InlineKeyboardButton('–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ', callback_data='commercial')
    )
    
    await bot.send_message(
        chat_id,
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:',
        reply_markup=keyboard
    )